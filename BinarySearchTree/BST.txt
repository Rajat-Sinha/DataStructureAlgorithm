Sorted Array                                     									Linkedlist
Inserting a new item is quite slow: O(N)									Inserting a new item is quite fast: O(1)
Searching is quite fast with binary search Tree O(logN)						Searching is sequential: O(N)
Removing an item is slow:O(N)												Removing an item is fast because of 

refrence O(1)

Binary search Trees are going to make all of these operations quite fast in O(LogN)

Trees
	We have nodes with the data and connection between the nodes is edges
	The degree of a node is defined as the number of its neighbors.
	A tree is quite intuitive consists of nodes and edges
	Root node:
		We have a refrence to this,all other nodes can be accessed via the root node
	In a tree there must be only a single path from the root node to any other nodes in the tree
	If there are several ways to get to a given node:it is not a tree
	A Binary Tree is full if every node has 0 or 2 children.
	A node 
		directly connected to another node -> child
		The opposite is parent node
		Leaf nodes: with no children
	Let L be the number of leaf nodes and I be the number of internal nodes and every internal node has exactly k children or no child
		L = (k-1)*I + 1
	Also Number of nodes(n) = Number of Leaf Node(L) + Number of Internal Node(I)
		n = L + I
	Let the maximum possible height of a tree with n nodes is represented by H(n). The maximum possible value of H(n) can be approximately written using following recursion
		H(n) = H(2n/3) + 1
	The number of nodes in the left sub tree is at least half and at most twice the number of nodes in the right sub tree then Height of such Tree is Log3/2 N
	The height of a binary tree is the maximum number of edges in any root to leaf path. 
		The maximum number of nodes in a binary tree of height h is: 2^(h+1) - 1
		The minimum number of nodes in a binary tree of height h is: h+1
	The maximum number of binary trees that can be formed with three unlabeled nodes is:5
	The total number of structurally different possible binary trees can be found out using the Catalon number with n nodes	is (2n)!/ (n! *(n+1)!)
	
	Level of a node is distance from root to that node. For example, level of root is 1 and levels of left and right children of root is 2. The maximum number of nodes on level i of a binary tree is 2^(i-1)
	
Binary Search Trees
	They are data structures
	Keeps the keys in sorted order:so that lookup and other operations can use the principle of binary search
	Every node can have at most two children: left and right child
	left child: smaller than parent
	right child: greater than parent
	On every decision we get ride of half of the data in which we are searching: O(LogN)
	Height of a tree(h):
		The average height of a Binary Search tree is log(n)
		The average depth of a Binary Search tree is log(n)
		Nunber of level - 1
		the number of layers it contains
		Layer h contains 2^(h-1) nodes
		the length of the path from the root to the deepest node in the tree
		we should keep the height of the tree at a minimum which is h=LogN
		if the tree is unbalanced:the h=logn relation is no more valid and operation's running time is no more logarithmic
	If h ~ O(LogN) then tree is said to be balanced else unbalanced which means it is asymmetric
	Number of distinct BSTs constructed with n distinct keys are
		2nCn/(n+1)
	May Required Condition:
		The list must be sorted
		there should be the direct access to the middle element in any sublist
	Not the required condition for binary search algorithm
		There must be mechanism to delete and/or insert elements in list
	Limitation:
		must use a sorted array
		requirement of sorted array is expensive when a lot of insertion and deletions are needed
		there must be a mechanism to access middle element directly
BST Insertion:
	Start from root node
		If data we want to enter is greater than root node we go to right 
		If smaller we go to left node
BST Search
	Start at the root node
	If data we want to find is greater than root node we go to right 
	Else if smaller we go to left untill we find it
	We discard half of the tree so it is binary search in a sorted array O(logN)
	Smallest Node:
		Go to the left as far as possible it  will be smallest
	Largest Node:
		Go to the right as far as possible it will be largest
BST Delete:
	soft delete
		we donot remove the node from BST we just mark that it has been removed
	In Main three possible cases:
		Node we want to get rid of is a leaf node
			Very simple
			Just remove it or set it to null
			Find  + delete : O(logN) + O(1) = O(LogN)
		Node we want to get ride of has a single child
			Just have to update the refrences
			Find + Update(refrences): O(logN) + O(1) = O(logN)
		Node we want to get rid of has 2 children
			find greatest item in left subtree(Predecessor)
				or
			find smallest item in right subtree(Successor)
			Swap the Predecessor/Successor with the node which we want to remove
			case 1 or 2 will be occuring and can be dealt easily
			O(LogN)
BST Traversal:
	To visit every node in the tree
	Types:
		In-order Traversal
			Vist the leftSubtree+RootNode+RightSubtree Recursively
			Numerical Ordering or Alphabetical Ordering
			Inorder traversal of a BST always gives elements in increasing order
		Pre-order Traversal
			 first element in the Pre-order of any binary tree is the root
			Visit the rootNode+leftSubtree+RightSubtree Recursively
		Post-order Traversal
			last element in the Post-order of any binary tree is the root.
			Visit the leftSubtree+RightSubtree+rootNode Recursively
BST Complexities:
			Avergae Case        WorstCase
Space		   O(N)				   O(N)
Insert		   O(logN)			   O(N)
Delete		   O(logN)			   O(N)
Search		   O(logN)			   O(N)

Binary search algorithm can be applied to
	sorted binary trees
	sorted linear array
	pointer array
		Can not be applied to
			sorted linked list
	
Applications:
	Manipulate hierarchical data
	Make information easy to search (see tree traversal)
	Manipulate sorted lists of data
	Router algorithms
	Form of a multi-stage decision-making, like Chess Game
	As a workflow for compositing digital images for visual effects

We are given a set of n distinct elements and an unlabeled binary tree with n nodes.we populate the tree with the given set so that it becomes a binary search tree in only one way.	

If the tree becomes unbalances then operation running time complexities reduced to O(N) in the worst case
If a node having two children is deleted from a binary tree, it is replaced by its Inorder successor
A full binary tree with 2n+1 nodes contain n non-leaf nodes
If a node in a BST has two childrenthen its 
	inorder predecessor has no right child
	inorder successor has no left child

A binary tree in which if all its levels except possibly the last, have the maximum number of nodes and all the nodes at the last level appear as far left as possible, is known as full binary tree.

A full binary tree (sometimes proper binary tree or 2-tree or strictly binary tree) is a tree in which every node other than the leaves has two children

A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible

Postfix Notation (Postorder traversal of a expression tree) and Prefix Notation (Preorder traversal of a expression tree)  can be used to parse expressions without parentheses.

In a binary tree with n nodes, every node has an odd number of descendants. Every node is considered to be its own descendant.The number of nodes in the tree that have exactly one child is 0.
	
Consider a complete binary tree where the left and the right subtrees of the root are max-heaps. The lower bound for the number of operations to convert the tree to a heap is O(logN)

In a binary tree, for every node the difference between the number of nodes in the left and right subtrees is at most 2. If the height of the tree is h > 0, then the minimum number of nodes in the tree is: 2^(h-1) + 1

In a binary tree, the number of leaf nodes is always 1 more than number of internal nodes with 2 children

Consider an array representation of an n element binary heap where the elements are stored from index 1 to index n of the array. For the element stored at index i of the array (i<=n), the index of the parent is floor(i/2)

A complete binary tree with the property that the value at each node is as least as large as the values at its children is known as Heap

Optimal binary search tree construction can be performed efficiently using dynamic programming
Given the prefix and postfix walks of a binary tree, the tree cannot be re-constructed uniquely
Depth-first-search,Breadth First Search can be used to find the connected components of a graph
The number of disk pages access in B - tree search, where h is height, n is the number of keys, and t is the minimum degree, is: Î¸(logt n)

Inorder and postorder, preorder and inorder these pairs identify a tree uniquely.
Level order traversal of tree resembles the breadth first search of the graph.

A binary tree whose every node has either zero or two children is called Extended binary tree

A binary tree can easily be converted into q 2-tree by replacing each empty sub tree by a new external node

In a binary tree, certain null entries are replaced by special pointers which point to nodes higher in the tree for efficiency. These special pointers are called Thread.

In a Heap tree Values in a node is greater than every value in children of it.